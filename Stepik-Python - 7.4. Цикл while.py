# ******************************************************************************************************
# 7.4. Цикл while
# ******************************************************************************************************

# *** До КОНЦА 1***
# На вход программе подается последовательность слов, каждое слово на отдельной строке. Концом
# последовательности является слово «КОНЕЦ» (без кавычек). Напишите программу, которая выводит члены
# данной последовательности.
# Формат входных данных: На вход программе подается последовательность слов, каждое слово на отдельной строке.
# Формат выходных данных: Программа должна вывести члены данной последовательности.

# text = input()
# while text != 'КОНЕЦ':
#     print(text)
#     text = input()
# -----------------------------------------------------------------------------------------------------

# *** До КОНЦА 2***
# На вход программе подается последовательность слов, каждое слово на отдельной строке. Концом
# последовательности является слово «КОНЕЦ» или «конец» (большими или маленькими буквами, без кавычек).
# Напишите программу, которая выводит члены данной последовательности.
# Формат входных данных: На вход программе подается последовательность слов, каждое слово на отдельной строке.
# Формат выходных данных: Программа должна вывести члены данной последовательности.

# text = input()
# while text != 'КОНЕЦ' and text != 'конец':
#     print(text)
#     text = input()
# -----------------------------------------------------------------------------------------------------

# *** Количество членов***
# На вход программе подается последовательность слов, каждое слово на отдельной строке. Концом
# последовательности является одно из трех слов: «стоп», «хватит», «достаточно» (маленькими буквами,
# без кавычек). Напишите программу, которая выводит общее количество членов данной последовательности.
# Формат входных данных: На вход программе подается последовательность слов, каждое слово на отдельной строке.
# Формат выходных данных: Программа должна вывести общее количество членов данной последовательности.

# text = input()
# count = 0
# while text != 'стоп' and text != 'хватит' and text != 'достаточно':
#     count += 1
#     text = input()
# print(count)
# -----------------------------------------------------------------------------------------------------

# *** Пока делимся ***
# На вход программе подается последовательность целых чисел делящихся на 7, каждое число на отдельной строке. Концом
# последовательности является любое число не делящееся на 7. Напишите программу, которая выводит члены
# данной последовательности.
# Формат входных данных: На вход программе подается последовательность чисел, каждое число на отдельной строке.
# Формат выходных данных: Программа должна вывести члены данной последовательности.
# num = int(input())
# while num % 7 == 0:
#     print(num)
#     num = int(input())
# -----------------------------------------------------------------------------------------------------

# ***Сумма чисел ***
# На вход программе подается последовательность целых чисел, каждое число на отдельной строке. Концом
# последовательности является любое отрицательное число. Напишите программу, которая выводит сумму всех
# членов данной последовательности.
# Формат входных данных: На вход программе подается последовательность чисел, каждое число на отдельной строке.
# Формат выходных данных: Программа должна вывести сумму членов данной последовательности.
# num = int(input())
# summ = 0
# while num >= 0:
#     summ += num
#     num = int(input())
# print(summ)
# -----------------------------------------------------------------------------------------------------

# *** Количество пятерок ***
# На вход программе подается последовательность целых чисел от 1 до 5, характеризующее оценку ученика,
# каждое число на отдельной строке. Концом последовательности является любое отрицательное число, либо
# число большее 5. Напишите программу, которая выводит количество пятерок.
# Формат входных данных: На вход программе подается последовательность чисел, каждое число на отдельной строке.
# Формат выходных данных: Программа должна вывести количество пятерок.

# num = int(input())
# total = 0
# while 5 >= num >= 1:
#     if num == 5:
#         total += 1
#     num = int(input())
# print(total)
# -----------------------------------------------------------------------------------------------------

# *** Ведьмаку заплатите чеканной монетой ***
# Всем известно, что ведьмак способен одолеть любых чудовищ, однако его услуги обойдутся недешево, к тому же ведьмак
# не принимает купюры, он принимает только чеканные монеты. В мире ведьмака существуют монеты с номиналами
# 1, 5, 10, 25.
# Напишите программу, которая определяет какое минимальное количество чеканных монет нужно заплатить ведьмаку.
# Формат входных данных: На вход программе подается одно натуральное число, цена за услугу ведьмака.
# Формат выходных данных: Программа должна вывести минимально возможное количество чеканных монет для оплаты.
# num = int(input())
# total = 0
# while num >= 25:
#     total += num // 25
#     num -= 25 * (num // 25)
# while num >= 10:
#     total += num // 10
#     num -= 10 * (num // 10)
# while num >= 5:
#     total += num // 5
#     num -= 5 * (num // 5)
# print(total + num)
#
# ИЛИ:
# num, total = int(input()), 0
# for i in [25, 10, 5, 1]:
#     total += num // i
#     num %= i
# print(total)
#
# n = int(input())
# total = n//25 + (n%25)//10 +((n%25)%10)//5 +(((n%25)%10)%5)
# print(total)
#
# n = int(input())
# summ = 0
# while n >= 25:
#     summ += 1
#     n -= 25
# while n >= 10:
#     summ += 1
#     n -= 10
# while n >= 5:
#     summ += 1
#     n -= 5
# while n >= 1:
#     summ += 1
#     n -= 1
# print(summ)
# -----------------------------------------------------------------------------------------------------

# ******************************************************************************************************
# 7.5 Цикл while: обработка цифр числа
# ******************************************************************************************************

# Обратный порядок 1
# Дано натуральное число. Напишите программу, которая выводит его цифры в столбик в обратном порядке.
# Формат входных данных: На вход программе подается одно натуральное число.
# Формат выходных данных: Программа должна вывести цифры введенного числа в столбик в обратном порядке.

# n = int(input())
# while n != 0:
#     last_digit = n % 10
#     print(last_digit)
#     n = n // 10
# -----------------------------------------------------------------------------------------------------

# Обратный порядок 2
# Дано натуральное число. Напишите программу, которая меняет порядок цифр числа на обратный.
# Формат входных данных: На вход программе подается одно натуральное число.
# Формат выходных данных: Программа должна вывести число записанное в обратном порядке.

# n = int(input())
# s = ''
# while n != 0:
#     last_digit = n % 10
#     s = s + str(last_digit)
#     n = n // 10
# print(s)
#
# n = int(input())
# while n != 0:
#     last_digit = n % 10
#     n = n // 10
#     print(last_digit, end="")
# -----------------------------------------------------------------------------------------------------

# *** max и min ***
# Дано натуральное число n, (n≥10). Напишите программу, которая определяет его максимальную и минимальную цифры.
# Формат входных данных: На вход программе подается одно натуральное число.
# Формат выходных данных: Программа должна вывести максимальную и минимальную цифры введенного числа
# (с поясняющей надписью).
# n = int(input())
# max_digit, min_digit = 0, 9
# while n != 0:
#     last_digit = n % 10
#     max_digit = max(max_digit, last_digit)
#     min_digit = min(min_digit, last_digit)
#     n = n // 10
# print('Максимальная цифра равна', max_digit)
# print('Минимальная цифра равна', min_digit)
#
#
# x = str(input())
# print('Максимальная цифра равна', max(x))
# print('Минимальная цифра равна', min(x))
# -----------------------------------------------------------------------------------------------------

# *** Все вместе ***
# Дано натуральное число. Напишите программу, которая вычисляет:
# - сумму его цифр;
# - количество цифр в нем;
# - произведение его цифр;
# - среднее арифметическое его цифр;
# - его первую цифру;
# - сумму его первой и последней цифры.
# Формат входных данных: На вход программе подается одно натуральное число.
# Формат выходных данных: Программа должна вывести значения указанных величин в указанном порядке.
# n = int(input())
# summ, count, mult, first_digit = 0, 0, 1, 0
# last_digit = n % 10
# while n != 0:
#     digit = n % 10
#     summ += digit
#     count += 1
#     mult *= digit
#     first_digit = digit
#     n = n // 10
# average = summ / count
# print(summ, count, mult, average, first_digit, first_digit + last_digit, sep='\n')
# -----------------------------------------------------------------------------------------------------

# *** Вторая цифра ***
# Дано натуральное число n, (n>9). Напишите программу, которая определяет его вторую (с начала) цифру.
# Формат входных данных: На вход программе подается одно натуральное число, состоящее как минимум из двух цифр.
# Формат выходных данных: Программа должна вывести его вторую (с начала) цифру.
# n = int(input())
# len_n = len(str(n))
# while n != 0:
#     if len_n == 2:
#         print(n % 10)
#     n = n // 10
#     len_n -= 1
#
#
# n = int(input())
# while n // 10 >= 1:
#     x = n % 10
#     n = n // 10
# print(x)
# -----------------------------------------------------------------------------------------------------

# *** Одинаковые цифры ***
# Дано натуральное число. Напишите программу, которая определяет, состоит ли указанное число из одинаковых цифр.
# Формат входных данных: На вход программе подается одно натуральное число.
# Формат выходных данных: Программа должна вывести «YES» если число состоит из одинаковых цифр и
# «NO» в противном случае.
# n = int(input())
# last_digit = n % 10
# flag = 'YES'
# while n != 0:
#     digit = n % 10
#     n = n // 10
#     if last_digit != digit:
#         flag = 'NO'
# print(flag)
#
#
# num = int(input())
# if str(num) == str(str(num % 10) * len(str(num))):
#    print('YES')
# else:
#    print('NO')
# -----------------------------------------------------------------------------------------------------

# Упорядоченные цифры
# Дано натуральное число. Напишите программу, которая определяет, является ли последовательность его
# цифр при просмотре справа налево упорядоченной по неубыванию.
# Формат входных данных: На вход программе подается одно натуральное число.
# Формат выходных данных: Программа должна вывести «YES» если последовательность его цифр при просмотре
# справа налево является упорядоченной по неубыванию и «NO» в противном случае.
# n = int(input())
# max_digit = 0
# flag = 'YES'
# while n != 0:
#     digit = n % 10
#     n = n // 10
#     if digit < max_digit:
#         flag = 'NO'
#     max_digit = digit
# print(flag)
#
# n, flag = int(input()), 'YES'
# while n // 10 != 0:
#     x = n % 10
#     n = n // 10
#     if x > n % 10:
#         flag = 'NO'
# print(flag)

# ******************************************************************************************************
# 7.6 break, continue и else
# ******************************************************************************************************
# *** Наименьший делитель ***
# На вход программе подается число n>1. Напишите программу, которая выводит его наименьший отличный от 1 делитель.
# Формат входных данных: На вход программе подается одно натуральное число n.
# Формат выходных данных: Программа должна вывести наименьший делитель отличный от 1.
# Примечание: Используйте оператор break при обнаружении делителя.

# num = int(input())
# for i in range(2, num+1):
#     if num % i == 0:
#         break
# print(i)
# -----------------------------------------------------------------------------------------------------

# Следуй правилам
# На вход программе подается натуральное число n. Напишите программу, которая выводит числа от 1 до n
# включительно за исключением:
# - чисел от 5 до 9 включительно;
# - чисел от 17 до 37 включительно;
# - чисел от 78 до 87 включительно.
# Формат входных данных: На вход программе подается одно натуральное число n.
# Формат выходных данных: Программа должна вывести числа в соответствии с условием задачи, каждое на отдельной строке.
# Примечание: Используйте оператор continue.

# n = int(input())
# for i in range(1, n + 1):
#     if 5 <= i <= 9 or 17 <= i <= 37 or 78 <= i <= 87:
#         continue
#     print(i)
#
#
# for i in range(1, int(input()) + 1):
#     if i not in range(5, 10) and i not in range(17, 38) and i not in range(78, 88):
#         print(i)

# ******************************************************************************************************
# 7.7 Поиск ошибок и ревью кода
# ******************************************************************************************************

# ******************************************************************************************************
# 7.8 Вложенные циклы. Часть 1
# ******************************************************************************************************

# *** Таблица-1 ***
# Дано натуральное число n (n≤9). Напишите программу, которая печатает таблицу размером n × 3 состоящую
# из данного числа (числа отделены одним пробелом).
# Формат входных данных: На вход программе подается одно натуральное число.
# Формат выходных данных: Программа должна вывести таблицу размером n × 3 состоящую из данного числа.
# Примечание: В конце строки может быть пробел.
# n = int(input())
# for i in range(n):
#     for j in range(3):
#         print(n, end=' ')
#     print()
# -----------------------------------------------------------------------------------------------------

# Таблица-2
# Дано натуральное число n (n≤9). Напишите программу, которая печатает таблицу размером n × 5, где в i-ой
# строке указано число i (числа отделены одним пробелом).
# Формат входных данных: На вход программе подается одно натуральное число.
# Формат выходных данных: Программа должна вывести таблицу размером n × 5 в соответствии с условием.
# Примечание: В конце строки может быть пробел.
# n = int(input())
# for i in range(n):
#     for j in range(5):
#         print(i + 1, end=' ')
#     print()
#
# n = int(input())
# for i in range(1, n + 1):
#     print(5 * (str(i) + ' '))
# -----------------------------------------------------------------------------------------------------

# Таблица-3
# Дано натуральное число n (n≤9). Напишите программу, которая печатает таблицу сложения для всех чисел от
# 1 до n в соответствии с примером.
# Формат входных данных: На вход программе подается одно натуральное число.
# Формат выходных данных: Программа должна вывести таблицу сложения для всех чисел от 1 до n.
# Примечание: В конце строки может быть пробел.
# n = int(input())
# for i in range(1, n + 1):
#     for j in range(1, 10):
#         print(i, '+', j, '=', i + j)
#     print()

# Дано нечетное натуральное число n. Напишите программу, которая печатает равнобедренный звездный треугольник
# с основанием, равным n в соответствии с примером:
# *
# **
# ***
# ****
# ***
# **
# *
# Формат входных данных: На вход программе подается одно нечетное натуральное число.
# Формат выходных данных: Программа должна вывести треугольник в соответствии с условием.
# Примечание: Используйте вложенный цикл for.
# n = int(input())
# for i in range(1, n // 2 + 2):
#     print('*' * i)
# for k in range(n // 2, 0, -1):
#     print('*' * k)
#
# n = int(input())
# for i in range(n // 2):
#     for j in range(i + 1):
#         print('*', end='')
#     print()
# for i in range(n - n // 2, 0, -1):
#     for j in range(i):
#         print('*', end='')
#     print()
#
# n = int(input())
# for i in range(1, n + 1):
#     k = n - i + 1
#     print('*' * min(i, k))
# -----------------------------------------------------------------------------------------------------

# *** Численный треугольник 1 ***
# Дано натуральное число n. Напишите программу, которая печатает численный треугольник в соответствии с примером:
# 1
# 22
# 333
# 4444
# 55555
# ...
# Формат входных данных: На вход программе подается одно натуральное число.
# Формат выходных данных: Программа должна вывести треугольник в соответствии с условием.
# Примечание: Используйте вложенный цикл for.
# n = int(input())
# for i in range(1, n + 1):
#     for j in range(i):
#         print(i, end='')
#     print()
# -----------------------------------------------------------------------------------------------------

# *** Использование вложенных циклов при решении уравнений ***
# Вложенные циклы можно использовать для решения уравнений с несколькими переменными. Зная, что решения (корни)
# уравнения являются натуральными (целыми) числами, несложно написать программу, содержащую вложенный цикл
# и перебирающую все возможные значения переменных.
#
# Решение задач:
# !!! Задача 1: Найдите все пары натуральных чисел (и их количество) являющихся решением уравнения 12x+13y=777.
#
# Решение: Поскольку по условию числа x и y являются натуральными, то x≤64, y≤59 . Напишем программу, которая п
# еребирает всевозможные пары чисел (x;y) и проверяет для них выполнение условия 12x+13y=777.
#
# total = 0
# for x in range(1, 65):
#     for y in range(1, 60):
#         if 12 * x + 13 * y == 777:
#             total += 1
#             print('x =', x, 'y =', y)
# print('Общее количество натуральных решений =', total)
# В результате выполнения такого кода, мы получим:
#
# x = 3 y = 57
# x = 16 y = 45
# x = 29 y = 33
# x = 42 y = 21
# x = 55 y = 9
# Общее количество натуральных решений = 5
#
# !!!Задача 2: Найдите все пары натуральных чисел (и их количество) являющихся решением уравнения x^2+y^2+z^2 = 2020
#
# Решение:  Поскольку по условию числа x, y и z являются натуральными, то x, y, z <= sqrt(2020) = 45
# Напишем программу, которая перебирает всевозможные тройки чисел (x;y;z) и проверяет для них условие
# x^2+y^2+z^2 = 2020
#
# total = 0
# for x in range(1, 45):
#     for y in range(1, 45):
#         for z in range(1, 45):
#             if x ** 2 + y ** 2 + z ** 2 == 2020:
#                 total += 1
#                 print('x =', x, 'y =', y, 'z =', z)
# print('Общее количество натуральных решений =', total)
# В результате выполнения такого кода, мы получим:
#
# x = 18 y = 20 z = 36
# x = 18 y = 36 z = 20
# x = 20 y = 18 z = 36
# x = 20 y = 36 z = 18
# x = 36 y = 18 z = 20
# x = 36 y = 20 z = 18
# Общее количество натуральных решений = 6
# -----------------------------------------------------------------------------------------------------

# 12 месяцев
# Решите уравнение в натуральных числа 28n + 30k + 31m = 365.
# Примечание: Используйте вложенный цикл for. В первую очередь запишите решение с наименьшим значением n.
# for n in range(1, 13):
#     for k in range(1, 12):
#         for m in range(1, 11):
#             if n * 28 + k * 30 + m * 31 == 365:
#                 print('n =', n, 'k =', k, 'm =', m)
#
# for n in range(1, 13):
#     for k in range(1, 13):
#         for m in range(1, 13):
#             if 28 * n + 30 * k + 31 * m == 365:
#                 print(n, k, m)
#
# n, k, m = 28, 30, 31
# for i in range(1, 365 // n):
#     for j in range(1, 365 // k):
#         for g in range(1, 365 // m):
#             if 28 * i + 30 * j + 31 * g == 365:
#                 print('n =', i, 'k =', j,' m =', g)
# -----------------------------------------------------------------------------------------------------

# *** Старинная задача ***
# Имеется 100 рублей. Сколько быков, коров и телят можно купить на все эти деньги, если плата за
# быка – 10 рублей, за корову – 5 рублей, за теленка – 0.50 рубля и надо купить 100 голов скота?
# Примечание: Используйте вложенный цикл for.
# for b in range(11):
#     for k in range(21):
#         for t in range(201):
#             if (b * 10 + k * 5 + t * 0.5 == 100) and (b + k + t == 100):
#                 print('быков =', b, 'коров =', k, 'теленков =', t)
#
# for x in range(1, 100):
#     for y in range(1, 100):
#         for z in range(1,100):
#             if 10 * x + 5 * y + 0.5 * z == 100:
#                 print(x, y, z)
# -----------------------------------------------------------------------------------------------------

# *** Гипотеза Эйлера о сумме степеней ***
# В 1769 году Леонард Эйлер сформулировал обобщенную версию Великой теоремы Ферма, предполагая, что по крайней
# мере n энных степеней необходимо для получения суммы, которая сама является энной степенью для n>2. Напишите
# программу для опровержения гипотезы Эйлера (продержавшейся до 1967 года), и найдите четыре положительных целых
# чисел, сумма 5-х степеней которых равна 5-й степени другого положительного целого числа.
#
# Таким образом, найдите пять натуральных чисел a,b,c,d,e удовлетворяющих условию:
# a^5+b^5+c^5+d^5=e^5
# В ответе укажите сумму a+b+c+d+e.
# Примечание: Используйте пятикратно вложенный цикл for.
# for a in range(1, 100):
#     for b in range(1, 100):
#         for c in range(1, 100):
#             for d in range(1, 100):
#                 for e in range(100, 1, -1):
#                     if a ** 5 + b ** 5 + c ** 5 + d ** 5 == e ** 5:
#                         break
# print(a + b + c + d + e)
# -----------------------------------------------------------------------------------------------------

# Численный треугольник 3
# Дано натуральное число n. Напишите программу, которая печатает численный треугольник с высотой равной n,
# в соответствии с примером:
#
# 1
# 2 3
# 4 5 6
# 7 8 9 10
# 11 12 13 14 15
# 16 17 18 19 20 21
# ...
#
# Формат входных данных: На вход программе подается одно натуральное число.
# Формат выходных данных: Программа должна вывести треугольник в соответствии с условием.
# Примечание: Используйте вложенный цикл for.
# n = int(input())
# k = 1
# for i in range(1, n + 1):
#     for j in range(i):
#         print(k, end='')
#         k += 1
#     print()
#
# z = 1
# for i in range(1, int(input()) + 1):
#     for j in range(z, z + i):
#         print(j, end=" ")
#     print()
#     z += i
# -----------------------------------------------------------------------------------------------------

# *** Численный треугольник 2 ***
# Дано натуральное число n. Напишите программу, которая печатает численный треугольник с высотой равной n,
# в соответствии с примером:
#
# 1
# 121
# 12321
# 1234321
# 123454321
# ...
# Формат входных данных: На вход программе подается одно натуральное число.
# Формат выходных данных: Программа должна вывести треугольник в соответствии с условием.
# Примечание: Используйте вложенный цикл for.

# n = int(input())
# for i in range(1, n + 1):
#     for j in range(1, i + 1):
#         print(j, end='')
#         if j == i:
#             for k in range(j-1, 0, -1):
#                 print(k, end='')
#     print()
#
# n = int(input())
# for i in range(1, n + 1):
#     for j in range(i):
#         print(j + 1, end="")
#     for j in range(i, 1, -1):
#         print(j - 1, end="")
#     print()
#
# n = int(input())
# for i in range(1, n + 1):
#     for j in range(1, 2 * i):
#         print(min(j, 2 * i - j), end='')
#     print()
# -----------------------------------------------------------------------------------------------------

# *** Делители-1 ***
# На вход программе подается два натуральных числа a и b (a< b). Напишите программу, которая находит натуральное
# число из отрезка [a; b] с максимальной суммой делителей.
# Формат входных данных: На вход программе подаются два числа, каждое на отдельной строке.
# Формат выходных данных: Программа должна вывести два числа на одной строке, разделенных пробелом:
# число с максимальной суммой делителей и сумму его делителей.
# Примечание: Если таких чисел несколько, то выведите наибольшее из них.
# a, b = int(input()), int(input())
# max_total, flag = 0, 0
# for i in range(a, b + 1):
#     total = 0
#     for j in range(1, i+1):
#         if i % j == 0:
#             total += j
#     if max_total < total:
#         max_total = total
#         flag = i
# print(flag, max_total)
# -----------------------------------------------------------------------------------------------------

# *** Делители-2 ***
# На вход программе подается натуральное число n. Напишите программу, выводящую графическое изображения делимости
# чисел от 1 до n включительно. В каждой строке надо напечатать очередное число и столько символов «+»,
# сколько делителей у этого числа.
# Формат входных данных: На вход программе подается одно натуральное число.
# Формат выходных данных: Программа должна вывести графическое изображение чисел от 1 до n, каждое на отдельной строке.
# n = int(input())
# for i in range(1, n + 1):
#     total = 0
#     for j in range(1, i+1):
#         if i % j == 0:
#             total += 1
#     print(i, '+' * total, sep='')
#
# n = int(input())
# for i in range(1, n+1):
#     print(i, end = '')
#     for j in range(1, i+1):
#         if i%j == 0:
#             print('+', end = '')
#     print()
# -----------------------------------------------------------------------------------------------------

# *** Цифровой корень ***
# На вход программе подается натуральное число n. Напишите программу, которая находит цифровой корень данного числа.
# Цифровой корень числа n получается следующим образом: если сложить все цифры этого числа, затем все цифры
# найденной суммы и повторить этот процесс, то в результате будет получено однозначное число (цифра), которое
# и называется цифровым корнем данного числа.
# Формат входных данных: На вход программе подается одно натуральное число.
# Формат выходных данных: Программа должна вывести цифровой корень введенного числа.
# # Примечание: Используйте вложенные циклы while.
# n = int(input())
# while n >9:
#     digit = 0
#     while n != 0:
#         last_digit = n % 10
#         digit += last_digit
#         n = n // 10
#     n = digit
# print(n)
#
# number = int(input())
# total = 0
# while number > 9:
#     while number != 0:
#         total += number % 10
#         number //= 10
#     number, total = total, 0
# print(number)

# n = int(input())
# while n > 9:
#     last_dig = n % 10
#     n = n // 10
#     n += last_dig
# print(n)
# -----------------------------------------------------------------------------------------------------

# *** Сумма факториалов ***
# Дано натуральное число n. Напишите программу, которая выводит значение суммы 1!+2!+3!+ ... + n!.
# Формат входных данных: На вход программе подается одно натуральное число.
# Формат выходных данных: Программа должна вывести значение суммы 1!+2!+3!+ ...+ n!.
# Примечание 1: Факториалом натурального числа n, называется произведение всех натуральных чисел от 1 до n,
# то есть n! = 1 * 2 * 3 * ... * n
# Примечание 2: Задачу можно решить без вложенного цикла. Напишите две версии программы =)
# c вложенным циклом:
# n = int(input())
# total = 0
# for i in range(1, n + 1):
#     factorial = 1
#     for j in range(1, i + 1):
#         factorial *= j
#     total += factorial
# print(total)
#
# # без вложенного цикла:
# n = int(input())
# total, factorial = 0, 1
# for i in range(1, n + 1):
#     factorial *= i
#     total += factorial
# print(total)
# -----------------------------------------------------------------------------------------------------

# *** Простые числа ***
# На вход программе подается два натуральных числа a и b (a < b). Напишите программу, которая находит все простые
# числа от a до b включительно.
# Формат входных данных: На вход программе подаются два числа, каждое на отдельной строке.
# Формат выходных данных: Программа должна вывести все простые числа от a до b включительно, каждое на отдельное строке.
# Простое число — это натуральное число, больше единицы, имеющее ровно два натуральных делителя: 1 и само себя.
# a, b = int(input()), int(input())
# for i in range(a, b+1):
#     count = 0
#     for j in range(1, i + 1):
#         if i % j == 0:
#             count += 1
#     if count == 2:
#         print(i)